========================
unique_ptr for C++03

(c) 2013 Andrew Ho

Distributed under the Boost Software License, Version 1.0. (See
accompanying file LICENSE_1_0.txt or copy at
http://www.boost.org/LICENSE_1_0.txt)
========================

This library provides C++11 unique_ptr for C++03 compilers.
It tries to emulate standard behavior as closely as possible.
The library will map to standard features when available.

============
Dependencies (only used when standard features not available)
============

Boost.Move (maps to standard features when available)
Boost.TypeTraits
Boost.Config

============
Limitations
============

- Use of std::nullptr_t/nullptr is only enabled with compiler support.
- The class is not "move-constructable" from a std::auto_ptr if the compiler does not support true rvalue references.
	To move an auto_ptr's resource to a unique_ptr in a C++03/C++11 independent manner:
	my_uptr(my_aptr.release());
- If D is a ref, the following should be a compiler error: unique_ptr<int, D&>(new int, D()) // should call unique_ptr(pointer, D&&)
	Unfortunately, there's no implicit conversion from a rvalue to an rvalue ref and this actually binds to unique_ptr(pointer, D&)
	This means it cannot detect if this is a compiler error or not (it should be)
- unique_ptr can only be stored in move-aware containers. Unfortunately, C++03 containers such as std::vector, std::map, etc. are not move aware.
	
============
Usage/Building
============

This is a header-only library.

To use this class, include <boost/unique_ptr.hpp>.
For std::default_delete emulation you can include <boost/default_delete.hpp> (this is included by default).

All items are found in the boost namespace. See the standard C++11 library documentation for library documentation.

===========
TODO
===========

As part of C++14's working draft it has been proposed/accepted to include make_unique.
There are plans to include this in this library, but it has not been implemented yet.

There may be missing checks particularly construction/assignment which are disallowed by the standard which this implementation allows.
Unless stated otherwise in limitations, these are bugs and should be fixed. 